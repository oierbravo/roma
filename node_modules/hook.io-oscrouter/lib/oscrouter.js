var Hook = require('hook.io').Hook,
    util = require('util');
    
var OSCRouterHook = exports.OSCRouterHook = function(options){
  Hook.call(this, options);
  var self = this;
  this.type = 'osc-router'
  var devices = options.devices;
  
  this.sources = {};
  options.routes.forEach(function(value){
   self.sources[value.source] = value.targets;
    
  });
  self.on('*::osc-in-message', self._oscMessage);
};

// OSCServerHook inherits from Hook
util.inherits(OSCRouterHook, Hook);
OSCRouterHook.prototype._oscMessage = function(message){
  var self = this;
	route = this.sources[message.path];
	//console.log(route);
	if(typeof route !== 'undefined'){
	  route.forEach(function(value){
	    //console.log(value);
	    var output;
	    if(value.routeArgs){
	    /*value.params.forEach(function(v,i,a){
	       if(typeof v=="string"){
	         if(v[0] == '#'){
	          var paramIndex = v.replace('/#arg/',''); 
	          value.params[paramIndex] = message.params[paramIndex -1];
	         }
	       }
	     });*/
	      processedParams = value.params.map(function(val){
	        if(typeof val=="string"){
           if(val[0] == '#'){
            var paramIndex = val.replace('#arg',''); 
            return message.params[paramIndex];
           } else {
             return val;
           }
         } else {
           return val;
         }
	      });

	     output = {path:value.path,params:processedParams,typetag:value.typetag};
	    } else {
	     output = {path:value.path,params:message.params,typetag:message.typetag};
	    }
	    self.emit('osc-out-message::' + value.deviceId,output);
	    output.deviceId = value.deviceId;
	    self.emit('osc-out-message',output);
	  });
	}
}
