var Hook = require('hook.io').Hook,
    util = require('util');
var osc = require('omgosc');
  
var OSCServerHook = exports.OSCServerHook = function(options){
  Hook.call(this, options);
  var self = this;
  this.type = 'osc-server'
  
  self.on('hook::ready', function(){
    var oscReceiver = new osc.UdpReceiver(options.inPort,options.host);
    self.oscReceiver = oscReceiver;
    
    if(self.debug)
      console.log("OSC server listening on port %d in %s", options.inPort, options.host);
      
    var oscSender = new osc.UdpSender(options.host,options.outPort);
    self.oscSender = oscSender;
    
    if(self.debug)
      console.log("OSC server prepared for sending on port %d in %s", options.outPort, options.host);
      
    
    oscReceiver.on('', function(message){
      self.emit('osc-in-message', message);
    });
    var onn = '*::osc-out-message::' + self.name;
    var onn = '*::osc-out-message';
    //console.log(onn);
    self.on(onn,function(message){
      
      if(message.deviceId == self.name){
       // console.log('out-message:');
         //console.log(message);
              self.oscSender.send(message.path,message.typetag,message.params);
            }
    });
  //  self.on('*::osc-out-message::' + self.name, self._outMessage);
    //self.on('*::osc-out-message', self._outMessage);
  
  });
};

// OSCServerHook inherits from Hook
util.inherits(OSCServerHook, Hook);
OSCServerHook.prototype._outMessage = function(message){
  console.log('outMessage hook:' + this.name);
  console.log(message);
  this.oscSender.send(message.path,message.typetag,message.params);
}
OSCServerHook.prototype._inMessage = function(message){
  //console.log(message);
  this.emit('osc-in-message', message);
}